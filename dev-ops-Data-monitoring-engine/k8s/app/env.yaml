# -----------------------------
# 0) NAMESPACE
# -----------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
# -----------------------------
# 1) RABBITMQ CLUSTER (3 nodes)
# -----------------------------
apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  name: rabbitmq-cluster
  namespace: monitoring
spec:
  replicas: 3
  # Use ClusterIP so it's only internal; we'll expose management UI via Ingress
  service:
    type: ClusterIP
  persistence:
    storageClassName: standard
    storage: 5Gi
  rabbitmq:
    additionalConfig: |-
      default_user = admin
      default_pass = admin
      loopback_users.guest = false
---
# 1) Secret holding the admin credentials
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-admin-user-secret
  namespace: monitoring
stringData:
  username: admin
  password: admin

---
# 2) Messaging Topology CR: create a RabbitMQ user
apiVersion: rabbitmq.com/v1beta1
kind: User
metadata:
  name: admin-user
  namespace: monitoring
spec:
  tags:
    - administrator
  rabbitmqClusterReference:
    name: rabbitmq-cluster
  importCredentialsSecret:
    name: rabbitmq-admin-user-secret
---
# -----------------------------
# 2) NODE-RED
# -----------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodered
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nodered
  template:
    metadata:
      labels:
        app: nodered
    spec:
      containers:
        - name: nodered
          image: nodered/node-red:latest
          ports:
            - containerPort: 1880
          volumeMounts:
            - name: flows
              mountPath: /data
      volumes:
        - name: flows
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: nodered
  namespace: monitoring
spec:
  type: ClusterIP
  selector:
    app: nodered
  ports:
    - port: 1880
      targetPort: 1880
---
# -----------------------------
# 3) PROMETHEUS
# -----------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--web.listen-address=:9090"
            - "--web.external-url=/prometheus"
            - "--web.route-prefix=/prometheus"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prom-config
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
              readOnly: true
            - name: prom-config
              mountPath: /etc/prometheus/recording_rules.yml
              subPath: recording_rules.yml
              readOnly: true
      volumes:
        - name: prom-config
          configMap:
            name: prometheus-config
            items:
              - key: prometheus.yml
                path: prometheus.yml
              - key: recording_rules.yml
                path: recording_rules.yml
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  type: ClusterIP
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
---
# -----------------------------
# 4) GRAFANA PVC
# -----------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# -----------------------------
# 5) GRAFANA
# -----------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: "admin"
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "admin"
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
            - name: GF_SERVER_ROOT_URL
              value: "%(protocol)s://%(domain)s:%(http_port)s/grafana"
            - name: GF_SERVER_SERVE_FROM_SUB_PATH
              value: "true"
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
              readOnly: true
            - name: grafana-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
              readOnly: true
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards
              subPath: dashboards
              readOnly: true
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  type: ClusterIP
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
---
